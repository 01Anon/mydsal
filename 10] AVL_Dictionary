#include <iostream>
using namespace std;

class Node {
public:
    int data;
    int bal; // balance factor
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        bal = 0;
        left = right = nullptr;
    }
};

class Tree {
public:
    Node* insert(Node* root, Node* s);
    Node* rotateRight(Node* root);
    Node* rotateLeft(Node* root);
    void disp(Node* root, int space);
};
void Tree::disp(Node* root, int space) {
    if (root == nullptr) return;
    disp(root->right, space + 5);
    cout << endl;
    for (int i = 0; i < space; i++) cout << " ";
    cout << root->data;
    disp(root->left, space + 5);
}

Node* Tree::insert(Node* root, Node* s) {
    if (!root) return s;

    if (s->data < root->data) {
        root->left = insert(root->left, s);
    } else {
        root->right = insert(root->right, s);
    }
    if (!root->left && root->right) root->bal = -1;
    else if (root->left && !root->right) root->bal = 1;
    else root->bal = 0;
    if (root->bal == 1 && root->left && root->left->bal == 1) {
        root = rotateRight(root); // LL
    } else if (root->bal == -1 && root->right && root->right->bal == -1) {
        root = rotateLeft(root); // RR
    } else if (root->bal == 1 && root->left && root->left->bal == -1) {
        root->left = rotateLeft(root->left); // LR
        root = rotateRight(root);
    } else if (root->bal == -1 && root->right && root->right->bal == 1) {
        root->right = rotateRight(root->right); // RL
        root = rotateLeft(root);
    }
    return root;
}
Node* Tree::rotateRight(Node* root) {
    Node* temp = root->left;
    root->left = temp->right;
    temp->right = root;
    return temp;
}
Node* Tree::rotateLeft(Node* root) {
    Node* temp = root->right;
    root->right = temp->left;
    temp->left = root;
    return temp;
}

int main() {
    Tree t;
    Node* root = nullptr;
    char choice;

    do {
        int value;
        cout << "\nEnter value to insert: ";
        cin >> value;

        Node* newNode = new Node(value);
        root = t.insert(root, newNode);

        cout << "\nCurrent Tree:\n";
        t.disp(root, 0);
        cout << "\n\nInsert more nodes? (y/n): ";
        cin >> choice;

    } while (choice == 'y' || choice == 'Y');

    cout << "\nFinal AVL Tree:\n";
    t.disp(root, 0);
    cout << endl;
    return 0;
}
